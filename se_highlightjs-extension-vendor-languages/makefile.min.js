hljs.registerLanguage(
  "makefile",
  (() => {
    "use strict";
    return ({ UNDERSCORE_IDENT_RE, BACKSLASH_ESCAPE, HASH_COMMENT_MODE }) => {
      const i = {
        className: "variable",
        variants: [
          {
            begin: `\\$\\(${UNDERSCORE_IDENT_RE}\\)`,
            contains: [BACKSLASH_ESCAPE],
          },
          {
            begin: /\$[@%<?\^\+\*]/,
          },
        ],
      };

      const n = {
        className: "string",
        begin: /"/,
        end: /"/,
        contains: [BACKSLASH_ESCAPE, i],
      };

      const a = {
        className: "variable",
        begin: /\$\([\w-]+\s/,
        end: /\)/,
        keywords: {
          built_in:
            "subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value",
        },
        contains: [i],
      };

      const r = { begin: `^${UNDERSCORE_IDENT_RE}\\s*(?=[:+?]?=)` };

      const s = {
        className: "section",
        begin: /^[^\s]+:/,
        end: /$/,
        contains: [i],
      };

      return {
        name: "Makefile",
        aliases: ["mk", "mak"],
        keywords: {
          $pattern: /[\w-]+/,
          keyword:
            "define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath",
        },
        contains: [
          HASH_COMMENT_MODE,
          i,
          n,
          a,
          r,
          {
            className: "meta",
            begin: /^\.PHONY:/,
            end: /$/,
            keywords: { $pattern: /[\.\w]+/, "meta-keyword": ".PHONY" },
          },
          s,
        ],
      };
    };
  })()
);
