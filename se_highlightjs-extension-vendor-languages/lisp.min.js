hljs.registerLanguage("lisp", (() => {
  "use strict";
  return e => {
    const n =
              "[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*";

    const i = "\\|[^]*?\\|";

    const a =
      "(\\-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|\\-)?\\d+)?";

    const s = {
      className: "literal",
      begin: "\\b(t{1}|nil)\\b",
    };

    const b = {
      className: "number",
      variants: [
        {
          begin: a,
          relevance: 0,
        },
        { begin: "#(b|B)[0-1]+(/[0-1]+)?" },
        {
          begin: "#(o|O)[0-7]+(/[0-7]+)?",
        },
        { begin: "#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?" },
        {
          begin: `#(c|C)\\(${a} +${a}`,
          end: "\\)",
        },
      ],
    };

    const g = e.inherit(e.QUOTE_STRING_MODE, {
      illegal: null,
    });

    const l = e.COMMENT(";", "$", { relevance: 0 });
    const t = { begin: "\\*", end: "\\*" };

    const r = {
      className: "symbol",
      begin: `[:&]${n}`,
    };

    const c = { begin: n, relevance: 0 };
    const d = { begin: i };

    const o = {
      contains: [
        b,
        g,
        t,
        r,
        { begin: "\\(", end: "\\)", contains: ["self", s, g, b, c] },
        c,
      ],
      variants: [
        { begin: "['`]\\(", end: "\\)" },
        {
          begin: "\\(quote ",
          end: "\\)",
          keywords: {
            name: "quote",
          },
        },
        { begin: `'${i}` },
      ],
    };

    const u = {
      variants: [
        { begin: `'${n}` },
        {
          begin: `#'${n}(::${n})*`,
        },
      ],
    };

    const m = { begin: "\\(\\s*", end: "\\)" };
    const v = { endsWithParent: !0, relevance: 0 };
    return (
      (m.contains = [
        { className: "name", variants: [{ begin: n }, { begin: i }] },
        v,
      ]),
      (v.contains = [o, u, m, s, b, g, l, t, r, d, c]),
      {
        name: "Lisp",
        illegal: /\S/,
        contains: [b, e.SHEBANG(), s, g, l, o, u, m, c],
      }
    );
  };
})());
