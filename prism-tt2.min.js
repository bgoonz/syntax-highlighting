!(({languages, hooks}) => {
  (languages.tt2 = languages.extend("clike", {
    comment: /#.*|\[%#[\s\S]*?%\]/,
    keyword:
      /\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|SWITCH|TAGS|THROW|TRY|UNLESS|USE|WHILE|WRAPPER)\b/,
    punctuation: /[[\]{},()]/,
  })),
    languages.insertBefore("tt2", "number", {
      operator: /=[>=]?|!=?|<=?|>=?|&&|\|\|?|\b(?:and|not|or)\b/,
      variable: { pattern: /\b[a-z]\w*(?:\s*\.\s*(?:\d+|\$?[a-z]\w*))*\b/i },
    }),
    languages.insertBefore("tt2", "keyword", {
      delimiter: { pattern: /^(?:\[%|%%)-?|-?%\]$/, alias: "punctuation" },
    }),
    languages.insertBefore("tt2", "string", {
      "single-quoted-string": {
        pattern: /'[^\\']*(?:\\[\s\S][^\\']*)*'/,
        greedy: !0,
        alias: "string",
      },
      "double-quoted-string": {
        pattern: /"[^\\"]*(?:\\[\s\S][^\\"]*)*"/,
        greedy: !0,
        alias: "string",
        inside: {
          variable: { pattern: /\$(?:[a-z]\w*(?:\.(?:\d+|\$?[a-z]\w*))*)/i },
        },
      },
    }),
    delete languages.tt2.string,
    hooks.add("before-tokenize", e => {
      languages["markup-templating"].buildPlaceholders(
        e,
        "tt2",
        /\[%[\s\S]+?%\]/g
      );
    }),
    hooks.add("after-tokenize", e => {
      languages["markup-templating"].tokenizePlaceholders(e, "tt2");
    });
})(Prism);
