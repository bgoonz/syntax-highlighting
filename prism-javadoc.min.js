!(({ languages }) => {
  const e = /(^(?:[\t ]*(?:\*\s*)*))[^*\s].*$/m;

  const n =
    "(?:\\b[a-zA-Z]\\w+\\s*\\.\\s*)*\\b[A-Z]\\w*(?:\\s*<mem>)?|<mem>".replace(
      /<mem>/g,
      () => {
        return "#\\s*\\w+(?:\\s*\\([^()]*\\))?";
      }
    );

  (languages.javadoc = languages.extend("javadoclike", {})),
    languages.insertBefore("javadoc", "keyword", {
      reference: {
        pattern: RegExp(
          `(@(?:exception|link|linkplain|see|throws|value)\\s+(?:\\*\\s*)?)(?:${n})`
        ),
        lookbehind: !0,
        inside: {
          function: { pattern: /(#\s*)\w+(?=\s*\()/, lookbehind: !0 },
          field: { pattern: /(#\s*)\w+/, lookbehind: !0 },
          namespace: {
            pattern: /\b(?:[a-z]\w*\s*\.\s*)+/,
            inside: { punctuation: /\./ },
          },
          "class-name": /\b[A-Z]\w*/,
          keyword: languages.java.keyword,
          punctuation: /[#()[\],.]/,
        },
      },
      "class-name": {
        pattern: /(@param\s+)<[A-Z]\w*>/,
        lookbehind: !0,
        inside: { punctuation: /[.<>]/ },
      },
      "code-section": [
        {
          pattern:
            /(\{@code\s+(?!\s))(?:[^\s{}]|\s+(?![\s}])|\{(?:[^{}]|\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})*\})+(?=\s*\})/,
          lookbehind: !0,
          inside: {
            code: {
              pattern: e,
              lookbehind: !0,
              inside: languages.java,
              alias: "language-java",
            },
          },
        },
        {
          pattern:
            /(<(code|pre|tt)>(?!<code>)\s*)\S(?:\S|\s+\S)*?(?=\s*<\/\2>)/,
          lookbehind: !0,
          inside: {
            line: {
              pattern: e,
              lookbehind: !0,
              inside: {
                tag: languages.markup.tag,
                entity: languages.markup.entity,
                code: {
                  pattern: /.+/,
                  inside: languages.java,
                  alias: "language-java",
                },
              },
            },
          },
        },
      ],
      tag: languages.markup.tag,
      entity: languages.markup.entity,
    }),
    languages.javadoclike.addSupport("java", languages.javadoc);
})(Prism);
