!(h => {
  function v(e, n) {
    return `___${e.toUpperCase()}${n}___`;
  }
  Object.defineProperties((h.languages["markup-templating"] = {}), {
    buildPlaceholders: {
      value(a, r, e, o) {
        if (a.language === r) {
          const c = (a.tokenStack = []);
          (a.code = a.code.replace(e, e => {
            if ("function" == typeof o && !o(e)) return e;
            for (var n, t = c.length; -1 !== a.code.indexOf((n = v(r, t))); )
              ++t;
            return (c[t] = e), n;
          })),
            (a.grammar = h.languages.markup);
        }
      },
    },
    tokenizePlaceholders: {
      value(p, k) {
        if (p.language === k && p.tokenStack) {
          p.grammar = h.languages[k];
          let m = 0;
          const d = Object.keys(p.tokenStack);
          !(function e(n) {
            for (let t = 0; t < n.length && !(m >= d.length); t++) {
              const a = n[t];
              if (
                "string" == typeof a ||
                (a.content && "string" == typeof a.content)
              ) {
                const r = d[m];
                const o = p.tokenStack[r];
                const c = "string" == typeof a ? a : a.content;
                const i = v(k, r);
                const u = c.indexOf(i);
                if (-1 < u) {
                  ++m;
                  const g = c.substring(0, u);

                  const l = new h.Token(
                    k,
                    h.tokenize(o, p.grammar),
                    `language-${k}`,
                    o
                  );

                  const s = c.substring(u + i.length);
                  const f = [];
                  g && f.push(...e([g])),
                    f.push(l),
                    s && f.push(...e([s])),
                    "string" == typeof a
                      ? n.splice(...[t, 1].concat(f))
                      : (a.content = f);
                }
              } else a.content && e(a.content);
            }
            return n;
          })(p.tokens);
        }
      },
    },
  });
})(Prism);
