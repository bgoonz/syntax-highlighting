!(({ languages }) => {
  const r = { pattern: /(^[ \t]*| {2}|\t)#.*/m, lookbehind: !0, greedy: !0 };

  const o = {
    pattern: /((?:^|[^\\])(?:\\{2})*)[$@&%]\{(?:[^{}\r\n]|\{[^{}\r\n]*\})*\}/,
    lookbehind: !0,
    inside: { punctuation: /^[$@&%]\{|\}$/ },
  };

  function n(t, n) {
    const e = {
      "section-header": { pattern: /^ ?\*{3}.+?\*{3}/, alias: "keyword" },
    };
    for (const a in n) e[a] = n[a];
    return (
      (e.tag = {
        pattern: /([\r\n](?: {2}|\t)[ \t]*)\[[-\w]+\]/,
        lookbehind: !0,
        inside: { punctuation: /\[|\]/ },
      }),
      (e.variable = o),
      (e.comment = r),
      {
        pattern: RegExp(
          "^ ?\\*{3}[ \t]*<name>[ \t]*\\*{3}(?:.|[\r\n](?!\\*{3}))*".replace(
            /<name>/g,
            () => {
              return t;
            }
          ),
          "im"
        ),
        alias: "section",
        inside: e,
      }
    );
  }

  const e = {
    pattern:
      /(\[Documentation\](?: {2}|\t)[ \t]*)(?![ \t]|#)(?:.|(?:\r\n?|\n)[ \t]*\.{3})+/,
    lookbehind: !0,
    alias: "string",
  };

  const a = {
    pattern: /([\r\n] ?)(?!#)(?:\S(?:[ \t]\S)*)+/,
    lookbehind: !0,
    alias: "function",
    inside: { variable: o },
  };

  const i = {
    pattern: /([\r\n](?: {2}|\t)[ \t]*)(?!\[|\.{3}|#)(?:\S(?:[ \t]\S)*)+/,
    lookbehind: !0,
    inside: { variable: o },
  };

  (languages.robotframework = {
    settings: n("Settings", {
      documentation: {
        pattern:
          /([\r\n] ?Documentation(?: {2}|\t)[ \t]*)(?![ \t]|#)(?:.|(?:\r\n?|\n)[ \t]*\.{3})+/,
        lookbehind: !0,
        alias: "string",
      },
      property: {
        pattern: /([\r\n] ?)(?!\.{3}|#)(?:\S(?:[ \t]\S)*)+/,
        lookbehind: !0,
      },
    }),
    variables: n("Variables"),
    "test-cases": n("Test Cases", {
      "test-name": a,
      documentation: e,
      property: i,
    }),
    keywords: n("Keywords", {
      "keyword-name": a,
      documentation: e,
      property: i,
    }),
    tasks: n("Tasks", { "task-name": a, documentation: e, property: i }),
    comment: r,
  }),
    (languages.robot = languages.robotframework);
})(Prism);
