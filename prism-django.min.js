!(({ languages, hooks }) => {
  languages.django = {
    comment: /^\{#[\s\S]*?#\}$/,
    tag: { pattern: /(^\{%[+-]?\s*)\w+/, lookbehind: !0, alias: "keyword" },
    delimiter: { pattern: /^\{[{%][+-]?|[+-]?[}%]\}$/, alias: "punctuation" },
    string: { pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/, greedy: !0 },
    filter: { pattern: /(\|)\w+/, lookbehind: !0, alias: "function" },
    test: {
      pattern: /(\bis\s+(?:not\s+)?)(?!not\b)\w+/,
      lookbehind: !0,
      alias: "function",
    },
    function: /\b[a-z_]\w+(?=\s*\()/i,
    keyword:
      /\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\b/,
    operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
    number: /\b\d+(?:\.\d+)?\b/,
    boolean: /[Ff]alse|[Nn]one|[Tt]rue/,
    variable: /\b\w+\b/,
    punctuation: /[{}[\](),.:;]/,
  };
  const n = /\{\{[\s\S]*?\}\}|\{%[\s\S]*?%\}|\{#[\s\S]*?#\}/g;
  const o = languages["markup-templating"];
  hooks.add("before-tokenize", (e) => {
    o.buildPlaceholders(e, "django", n);
  }),
    hooks.add("after-tokenize", (e) => {
      o.tokenizePlaceholders(e, "django");
    }),
    (languages.jinja2 = languages.django),
    hooks.add("before-tokenize", (e) => {
      o.buildPlaceholders(e, "jinja2", n);
    }),
    hooks.add("after-tokenize", (e) => {
      o.tokenizePlaceholders(e, "jinja2");
    });
})(Prism);
